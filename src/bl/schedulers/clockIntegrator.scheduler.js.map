{"version":3,"file":"clockIntegrator.scheduler.js","sourceRoot":"","sources":["clockIntegrator.scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { UsersRepository } from \"../../dal/repositories/usersRepository\";\r\nimport { BiobeatWatchService, BiobeatMeasurmentsResponse } from \"../services/biobeatWatchService\";\r\nimport { MedicalStatsDB } from \"../../dal/types/medicalStats\";\r\nimport { EventsService } from \"../services/events.service\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport moment from 'moment';\r\n\r\nexport class ClockIntegratorScheduler {\r\n    private usersRepository: UsersRepository;\r\n    private biobeatWatchService: BiobeatWatchService\r\n\r\n    constructor() {\r\n        this.usersRepository = new UsersRepository();\r\n        this.biobeatWatchService = new BiobeatWatchService();\r\n    }\r\n\r\n    public async execute(): Promise<void> {\r\n        let eventsService = new EventsService();\r\n        let users = await this.usersRepository.findAll();\r\n        if (users) {\r\n            users.forEach(async user => {\r\n                if (user.clockSerial) {\r\n                    let endDate = new Date();\r\n                    let startDate = new Date(Date.now() - 86400000);\r\n                    let timeStampStart = moment(startDate).format('YYMMDDHHmmss').toString();\r\n                    let timeStampEnd = moment(endDate).format('YYMMDDHHmmss').toString();\r\n                    try {\r\n                        let biobeatWatchMeasurementsResponse = await this.biobeatWatchService.getMeasurement(user.clockSerial, timeStampStart, timeStampEnd);\r\n                        let biobeatWatchMeasurements = this.mapBiobeatMedicalStats(biobeatWatchMeasurementsResponse);\r\n                        console.log(\"watch \" + user.clockSerial + \" measurements are: \" + JSON.stringify(biobeatWatchMeasurements));\r\n                        if (biobeatWatchMeasurements && biobeatWatchMeasurements != []) {\r\n                            eventsService.addNewEvent(user.email, user.appToken, \"REPEATABLE\", \"Biobeat Watch Medical Stats\",\r\n                                undefined, biobeatWatchMeasurements);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(\"error while handling measurements of watch id \" + user.clockSerial + \" \" + e);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapBiobeatMedicalStats(biobeatWatchMeasurements: AxiosResponse<BiobeatMeasurmentsResponse[]>): MedicalStatsDB[] {\r\n        //@ts-ignore\r\n        let medicalStatsDB: MedicalStatsDB[] = biobeatWatchMeasurements.data.map(mes => ({\r\n            breathRate: mes.rr,\r\n            protocolNumber: mes.protocol_num,\r\n            systolicBloodPressure: mes.sbp,\r\n            strokeVolume: mes.sv,\r\n            spo2: mes.spo2,\r\n            movement: mes.movement,\r\n            cardiacIndex: mes.ci,\r\n            heartbeatRateVariance: mes.hrv,\r\n            heartbeatRate: mes.hr,\r\n            svr: mes.svr,\r\n            cardiacOutput: mes.co,\r\n            diastolicBloodPressure: mes.dbp,\r\n            temperature: mes.temp,\r\n            sweat: mes.sweat,\r\n            calories: mes.calories,\r\n            timestamp: mes.timestamp\r\n        }\r\n        ));\r\n        return medicalStatsDB;\r\n    }\r\n}"]}