{"version":3,"file":"clockIntegrator.scheduler.js","sourceRoot":"","sources":["clockIntegrator.scheduler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0EAAuE;AAEvE;IAGI;QACI,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,EAAE,CAAC;IACjD,CAAC;IAEY,0CAAO,GAApB;;;;;4BACgB,qBAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAA;;wBAA5C,KAAK,GAAG,SAAoC;wBAChD,IAAI,KAAK,EAAE;4BACP,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;gCACd,IAAI,IAAI,CAAC,WAAW,EAAE;oCAClB,0EAA0E;oCAC1E,iEAAiE;iCACpE;4BACL,CAAC,CAAC,CAAC;yBACN;;;;;KACJ;IACL,+BAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,4DAAwB","sourcesContent":["import {UsersRepository} from \"../../dal/repositories/usersRepository\";\r\n\r\nexport class ClockIntegratorScheduler {\r\n    private usersRepository: UsersRepository;\r\n\r\n    constructor() {\r\n        this.usersRepository = new UsersRepository();\r\n    }\r\n\r\n    public async execute(): Promise<void> {\r\n        let users = await this.usersRepository.findAll();\r\n        if (users) {\r\n            users.forEach(user => {\r\n                if (user.clockSerial) {\r\n                    // here we have to call to the clock service to receive clock information,\r\n                    // cast it to our format and save it as a clock information event\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"]}