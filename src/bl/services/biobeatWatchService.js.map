{"version":3,"file":"biobeatWatchService.js","sourceRoot":"","sources":["biobeatWatchService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA2D;AAC3D,kDAA4B;AA6B5B;IAOI;QALQ,gBAAW,GAAG,wHAAwH,CAAC;QACvI,UAAK,GAA+B,IAAI,CAAC;QACzC,oBAAe,GAAgB,IAAI,CAAC;QACpC,cAAS,GAAG,gHAAgH,CAAC;IAErH,CAAC;IAEJ,4CAAc,GAA3B,UAA4B,QAAgB,EAAE,cAAsB,EAAE,YAAoB;;;;;;wBAClF,kBAAkB,GAAG,iGAA+F,QAAQ,wBAAmB,cAAc,sBAAiB,YAAc,CAAC;;;;6BAGzL,CAAA,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAA,EAAnC,wBAAmC;wBACpB,qBAAM,IAAI,CAAC,QAAQ,EAAE,EAAA;;wBAAhC,QAAQ,GAAG,SAAqB;wBACpC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;wBAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;;;;wBAEvB,qBAAM,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAA;4BAAtF,sBAAO,SAA+E,EAAC;;;wBAGvF,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,GAAC,CAAC,CAAC;wBAC9C,MAAM,GAAC,CAAC;;;wBAIZ,OAAO,CAAC,GAAG,CAAC,sDAAsD,GAAG,QAAQ,CAAC,CAAC;;;;wBAEpE,qBAAM,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAA;4BAAnF,sBAAO,SAA4E,EAAC;;;wBAGpF,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,GAAC,CAAC,CAAC;wBAC9C,MAAM,GAAC,CAAC;;;;wBAKhB,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,GAAC,CAAC,CAAC;wBAC/C,MAAM,GAAC,CAAC;;;;;KAEf;IAEO,0CAAY,GAApB;QACI,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC;QACvD,IAAI,cAAc,GAAG,gBAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;QAC3F,OAAO,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;IAClC,CAAC;IAEa,qDAAuB,GAArC,UAAsC,kBAA0B,EAAE,QAA6B,EAAE,QAAgB;;;;;4BAC1F,qBAAM,eAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE;4BACnD,OAAO,EAAE;gCACL,WAAW,EAAE,QAAQ,CAAC,YAAY;6BACrC;yBACJ,CAAC,EAAA;;wBAJE,YAAY,GAAG,SAIjB;wBACF,OAAO,CAAC,GAAG,CAAC,uCAAuC,GAAG,QAAQ,CAAC,CAAC;wBAChE,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACxC;IAEa,sCAAQ,GAAtB;;;gBACI,sBAAO,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;wBACpD,OAAO,EAAE;4BACL,cAAc,EAAE,mCAAmC;4BACnD,eAAe,EAAE,IAAI,CAAC,SAAS;yBAClC;qBACJ,CAAC,EAAC;;;KACN;IACL,0BAAC;AAAD,CAAC,AAnED,IAmEC;AAnEY,kDAAmB","sourcesContent":["import axios, { AxiosPromise, AxiosResponse } from \"axios\";\r\nimport moment from 'moment';\r\n\r\nexport interface BiobeatTokenReponse {\r\n    access_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n}\r\n\r\nexport interface BiobeatMeasurmentsResponse {\r\n    rr: number;\r\n    pp: number;\r\n    protocol_num: number;\r\n    sbp: number;\r\n    sv: number;\r\n    spo2: number;\r\n    movement: number;\r\n    ci: number;\r\n    timestamp: number;\r\n    patch_id: string;\r\n    hrv: number;\r\n    hr: number;\r\n    svr: number;\r\n    co: number;\r\n    dbp: number;\r\n    temp: number;\r\n    sweat: number;\r\n    calories: number\r\n}\r\n\r\nexport class BiobeatWatchService {\r\n\r\n    private getTokenUrl = `https://biobeatlogin.auth.eu-west-1.amazoncognito.com/oauth2/token?grant_type=client_credentials&scope=com.heroes/post`;\r\n    private token: BiobeatTokenReponse | null = null;\r\n    private lastTokenUpdate: Date | null = null;\r\n    private tokenAuth = \"Basic N2xpM2tvOGhqYXV2MWk1bTByMjBnMGVhMDM6Y3EycHNmbGJlY3Y4ZXI4ajdsNG9yNGVucGJlNmxiNWRtYTkwZWhyOGdkaTJpcjIyMnNm\";\r\n\r\n    constructor() { }\r\n\r\n    public async getMeasurement(patch_id: string, timeStampStart: string, timeStampEnd: string): Promise<AxiosResponse<BiobeatMeasurmentsResponse[]>> {\r\n        let getMeasurementsUrl = `https://nkxjoc59ab.execute-api.eu-west-1.amazonaws.com/test/heroes-get-measurement?patch_id=${patch_id}&timestampstart=${timeStampStart}&timestampend=${timeStampEnd}`;\r\n\r\n        try {\r\n            if (!this.token || !this.isTokenValid()) {\r\n                let tokenRes = await this.getToken();\r\n                this.token = tokenRes.data;\r\n                this.lastTokenUpdate = new Date();\r\n                try {\r\n                    return await this.getMeasurementFromWatch(getMeasurementsUrl, tokenRes.data, patch_id);\r\n                }\r\n                catch (e) {\r\n                    console.log(\"error getting measurement \" + e);\r\n                    throw e;\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"using existing token to get measurement of watch id \" + patch_id);\r\n                try {\r\n                    return await this.getMeasurementFromWatch(getMeasurementsUrl, this.token, patch_id);\r\n                }\r\n                catch (e) {\r\n                    console.log(\"error getting measurement \" + e);\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(\"error getting access token \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private isTokenValid() {\r\n        let now = new Date();\r\n        if (!this.lastTokenUpdate || !this.token) return false;\r\n        var validUntilDate = moment(this.lastTokenUpdate).add(this.token.expires_in, 's').toDate();\r\n        return (validUntilDate > now);\r\n    }\r\n\r\n    private async getMeasurementFromWatch(getMeasurementsUrl: string, tokenRes: BiobeatTokenReponse, patch_id: string) {\r\n        let axiosPromise = await axios.get(getMeasurementsUrl, {\r\n            headers: {\r\n                'bb_heroes': tokenRes.access_token\r\n            }\r\n        });\r\n        console.log(\"returning measurement data for watch \" + patch_id);\r\n        return Promise.resolve(axiosPromise);\r\n    }\r\n\r\n    private async getToken(): Promise<AxiosResponse<BiobeatTokenReponse>> {\r\n        return axios.post(this.getTokenUrl, JSON.stringify({}), {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization': this.tokenAuth\r\n            }\r\n        });\r\n    }\r\n}"]}