{"version":3,"file":"events.service.js","sourceRoot":"","sources":["events.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4EAAyE;AAEzE,0EAAuE;AAEvE;IAAA;IA0CA,CAAC;IAzCgB,mCAAW,GAAxB,UAAyB,SAAiB,EAAE,QAAgB,EAAE,OAAe,EACpD,gBAAwB,EAAE,QAAuC;;;;;4BACtF,qBAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;wBAC/C,gBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC;wBAE1C,KAAK,GAAY;4BACjB,SAAS,EAAE,SAAS;4BACpB,QAAQ,EAAE,QAAQ;4BAClB,OAAO,EAAE,OAAO;4BAChB,gBAAgB,EAAE,gBAAgB;4BAClC,QAAQ,EAAE;gCACN,WAAW,EAAE;oCACT,QAAQ,EAAE,QAAQ,CAAC,GAAG;oCACtB,SAAS,EAAE,QAAQ,CAAC,IAAI;iCAC3B;gCACD,WAAW,EAAE,IAAI;gCACjB,iBAAiB,EAAE,IAAI;gCACvB,gBAAgB,EAAE,IAAI;gCACtB,OAAO,EAAE,IAAI;6BAChB;4BACD,SAAS,EAAE,IAAI,IAAI,EAAE;yBACxB,CAAC;;;;wBAGE,qBAAM,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;wBAAlC,SAAkC,CAAC;;;;wBAEnC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,GAAC,CAAC,CAAC;wBACvC,MAAM,GAAC,CAAC;;;;;KAEf;IAGa,0CAAkB,GAAhC,UAAiC,SAAiB,EAAE,QAAgB;;;;;;wBAC5D,eAAe,GAAG,IAAI,iCAAe,EAAE,CAAC;wBACf,qBAAM,eAAe,CAAC,sBAAsB,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAA;;wBAA1F,sBAAsB,GAAG,SAAiE;wBAC9F,IAAI,CAAC,sBAAsB,EAAE;4BACrB,OAAO,GAAG,gDAAgD,GAAG,SAAS,GAAG,mBAAmB,GAAG,QAAQ,CAAC;4BAC5G,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;4BACrB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;yBAC5B;;;;;KACJ;IACL,oBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,sCAAa","sourcesContent":["import {EventsRepository} from \"../../dal/repositories/eventsRepository\";\r\nimport {EventDB} from \"../../dal/types/event\";\r\nimport {UsersRepository} from \"../../dal/repositories/usersRepository\";\r\n\r\nexport class EventsService {\r\n    public async addNewEvent(userEmail: string, appToken: string, logType: string,\r\n                             eventDescription: string, location: { lat: number, long: number }) {\r\n        await this.validateUserAndApp(userEmail, appToken);\r\n        let eventsRepository = new EventsRepository();\r\n        // @ts-ignore\r\n        let event: EventDB = {\r\n            userEmail: userEmail,\r\n            appToken: appToken,\r\n            logType: logType,\r\n            eventDescription: eventDescription,\r\n            location: {\r\n                coordinates: {\r\n                    latitude: location.lat,\r\n                    longitude: location.long\r\n                },\r\n                crowdedness: null,\r\n                pointsOfInterests: null,\r\n                geocodedLocation: null,\r\n                weather: null\r\n            },\r\n            timestamp: new Date()\r\n        };\r\n\r\n        try {\r\n            await eventsRepository.save(event);\r\n        } catch (e) {\r\n            console.log(\"error saving event \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n\r\n    private async validateUserAndApp(userEmail: string, appToken: string) {\r\n        let usersRepository = new UsersRepository();\r\n        let findByEmailAndAppToken = await usersRepository.findByEmailAndAppToken(userEmail, appToken);\r\n        if (!findByEmailAndAppToken) {\r\n            let message = \"trying to save event for an unidentified user \" + userEmail + \" under app token \" + appToken;\r\n            console.log(message);\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}"]}