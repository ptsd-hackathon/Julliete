{"version":3,"file":"registerApp.resolver.js","sourceRoot":"","sources":["registerApp.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wEAAqE;AAIrE,SAAsB,WAAW,CAAC,IAAS,EAAE,EAE5C;QAF6C,oBAAO;;;;;;oBAG7C,cAAc,GAAG,IAAI,+BAAc,EAAE,CAAC;;;;oBAIzB,qBAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,EAAA;;oBAArD,UAAU,GAAG,SAAwC,CAAC;oBACtD,IAAI,UAAU,EAAE;wBACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;qBACrD;;;;oBAED,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,OAAO,CAAC,CAAC;oBAC5C,MAAM,GAAC,CAAC;;oBAIR,GAAG,GAAU,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;;;;oBAEb,qBAAM,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;;oBAA7C,YAAY,GAAG,SAA8B;oBACjD,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,YAAY,CAAC,EAAE,CAAC,CAAC;oBACxD,sBAAO,EAAC,KAAK,EAAE,YAAY,CAAC,EAAE,EAAC,EAAC;;;oBAEhC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,GAAC,CAAC,CAAC;oBACvC,MAAM,GAAC,CAAC;;;;;CAEf;AA1BD,kCA0BC","sourcesContent":["import {AppsRepository} from \"../../dal/repositories/appsRepository\";\r\nimport {AppDB} from \"../../dal/types/application\";\r\nimport {GQLAppToken} from \"../../../graphql-types\";\r\n\r\nexport async function registerApp(root: any, {appName}: {\r\n    appName: string\r\n}): Promise<GQLAppToken> {\r\n    let appsRepository = new AppsRepository();\r\n\r\n    let foundAppDB: AppDB | null;\r\n    try {\r\n        foundAppDB = await appsRepository.findByName(appName);\r\n        if (foundAppDB) {\r\n            throw new Error(\"app name is already registered\");\r\n        }\r\n    } catch (e) {\r\n        console.log(\"error finding app \" + appName);\r\n        throw e;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let app: AppDB = {appName: appName};\r\n    try {\r\n        let appDBPromise = await appsRepository.save(app);\r\n        console.log(\"new App saved with id \" + appDBPromise.id);\r\n        return {token: appDBPromise.id};\r\n    } catch (e) {\r\n        console.log(\"error creating app \" + e);\r\n        throw e;\r\n    }\r\n}"]}