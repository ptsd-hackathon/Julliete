{"version":3,"file":"userEvents.resolver.js","sourceRoot":"","sources":["userEvents.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4EAAyE;AAEzE,SAAsB,UAAU,CAAC,IAAS,EAAE,EAE3C;QAF4C,wBAAS,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,kBAAM;;;;;;oBAG1E,gBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC;;;;oBAE1C,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,8BAA8B,GAAG,SAAS,GAAG,iBAAiB,GAAG,QAAQ,GAAG,aAAa,GAAG,QAAQ,GAAG,WAAW,GAAG,MAAM,CAAC,CAAC;oBAElI,qBAAM,gBAAgB,CAAC,uCAAuC,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAA;;gBAD5G,aAAa;gBACb,sBAAO,SAAqG,EAAC;;;oBAE7G,OAAO,CAAC,GAAG,CAAC,sFAAsF,GAAG,QAAQ,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;oBAChI,MAAM,GAAC,CAAC;;;;;CAEf;AAbD,gCAaC","sourcesContent":["import {GQLUserEvent} from \"../../../graphql-types\";\r\nimport {EventsRepository} from \"../../dal/repositories/eventsRepository\";\r\n\r\nexport async function userEvents(root: any, {userEmail, appToken, fromDate, toDate}: {\r\n    userEmail: string, appToken: string, fromDate: Date, toDate: Date\r\n}): Promise<GQLUserEvent[] | null> {\r\n    let eventsRepository = new EventsRepository();\r\n    try {\r\n        console.log(fromDate);\r\n        console.log(\"fetched all events for user \" + userEmail + \" and app token \" + appToken + \" from date \" + fromDate + \" to date \" + toDate);\r\n        // @ts-ignore\r\n        return await eventsRepository.findAllByUserAndAppTokenAndBetweenDates(userEmail, appToken, fromDate, toDate);\r\n    } catch (e) {\r\n        console.log(\"error while finding all events for a specific user and app token between the dates: \" + fromDate + \" , \" + toDate);\r\n        throw e;\r\n    }\r\n}"]}