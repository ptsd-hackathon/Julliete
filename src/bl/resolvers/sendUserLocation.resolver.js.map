{"version":3,"file":"sendUserLocation.resolver.js","sourceRoot":"","sources":["sendUserLocation.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6DAAyD;AAEzD,SAAsB,gBAAgB,CAAC,IAAS,EAAE,EAEjD;QAFkD,wBAAS,EAAE,sBAAQ,EAAE,sBAAQ;;;;;;oBAGxE,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;oBACxC,qBAAM,aAAa,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,yBAAyB,EACxF,QAAQ,CAAC,EAAA;;oBADb,SACa,CAAC;oBACd,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBAC/B,sBAAO,EAAC,gBAAgB,EAAE,GAAG,EAAE,eAAe,EAAE,MAAM,EAAE,iBAAiB,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAC,EAAC;;;;CACnG;AARD,4CAQC","sourcesContent":["import {GQLLocationInformation, GQLLocationInput} from \"../../../graphql-types\";\r\nimport {EventsService} from \"../services/events.service\";\r\n\r\nexport async function sendUserLocation(root: any, {userEmail, appToken, location}: {\r\n    userEmail: string, appToken: string, location: GQLLocationInput\r\n}): Promise<GQLLocationInformation | null> {\r\n    let eventsService = new EventsService();\r\n    await eventsService.addNewEvent(userEmail, appToken, \"REPEATABLE\", \"Standard Location Input\",\r\n        location);\r\n    console.log(\"Saved new event\");\r\n    return {crowdednessLevel: \"5\", geocodedAddress: \"Adsf\", pointsOfInterests: [], weather: \"adsf\"};\r\n}"]}