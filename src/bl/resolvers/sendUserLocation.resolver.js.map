{"version":3,"file":"sendUserLocation.resolver.js","sourceRoot":"","sources":["sendUserLocation.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6DAAyD;AACzD,gGAA4F;AAE5F,SAAsB,gBAAgB,CAAC,IAAS,EAAE,EAEjD;QAFkD,wBAAS,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,4CAAmB;;;;;;oBAG7F,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;oBACrB,qBAAM,0CAAmB,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAA;;oBAArH,YAAY,GAAG,SAAsG;oBACzH,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBAC/B,qBAAM,aAAa,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,yBAAyB,EACxF,mBAAmB,EAAE,EAAE,EAAE,YAAY,CAAC,EAAA;;oBAD1C,SAC0C,CAAC;oBACpC,qBAAM;4BACT,gBAAgB,EAAE,YAAY,CAAC,WAAW;4BAC1C,eAAe,EAAE,YAAY,CAAC,OAAO;4BACrC,iBAAiB,EAAE,YAAY,CAAC,gBAAgB;4BAChD,OAAO,EAAE,YAAY,CAAC,OAAO;4BAC7B,WAAW,EAAE,mBAAmB;yBACnC,EAAA;wBAND,sBAAO,SAMN,EAAC;;;;CACL;AAfD,4CAeC","sourcesContent":["import {GQLLocationInformation, GQLLocationInput} from \"../../../graphql-types\";\r\nimport {EventsService} from \"../services/events.service\";\r\nimport {LocationInformation} from \"../services/location/locationLogic/location-information\";\r\n\r\nexport async function sendUserLocation(root: any, {userEmail, appToken, language, locationCoordinates}: {\r\n    userEmail: string, appToken: string, language: string, locationCoordinates: GQLLocationInput\r\n}): Promise<GQLLocationInformation> {\r\n    let eventsService = new EventsService();\r\n    let locationData = await LocationInformation.getLocationData(locationCoordinates.lat, locationCoordinates.long, language);\r\n    console.log(\"Saved new event\");\r\n    await eventsService.addNewEvent(userEmail, appToken, \"REPEATABLE\", \"Standard Location Input\",\r\n        locationCoordinates, [], locationData);\r\n    return await {\r\n        crowdednessLevel: locationData.crowdedness,\r\n        geocodedAddress: locationData.address,\r\n        pointsOfInterests: locationData.pointsOfInterest,\r\n        weather: locationData.weather,\r\n        coordinates: locationCoordinates\r\n    };\r\n}"]}