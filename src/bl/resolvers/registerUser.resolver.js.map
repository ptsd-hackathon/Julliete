{"version":3,"file":"registerUser.resolver.js","sourceRoot":"","sources":["registerUser.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0EAAuE;AAEvE,wEAAqE;AAErE,SAAsB,YAAY,CAAC,IAAS,EAAE,EACsD;QADrD,wBAAS,EAAE,sBAAQ,EAAE,4BAAW,EAAE,8BAAY;;;;;;oBAErF,cAAc,GAAG,IAAI,+BAAc,EAAE,CAAC;oBACvB,qBAAM,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAA;;oBAAzD,YAAY,GAAG,SAA0C;oBAC7D,IAAI,CAAC,YAAY,EAAE;wBACf,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,QAAQ,CAAC,CAAC;wBACrD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;qBAChD;oBACG,eAAe,GAAG,IAAI,iCAAe,EAAE,CAAC;oBAC1B,qBAAM,eAAe,CAAC,sBAAsB,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAA;;oBAA/E,WAAW,GAAG,SAAiE;oBACnF,IAAI,WAAW,EAAE;wBACb,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,SAAS,GAAG,gCAAgC,GAAG,QAAQ,CAAC,CAAC;wBAC1F,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,SAAS,GAAG,iBAAiB,CAAC,CAAC;qBACvE;oBAEG,MAAM,GAAW;wBACjB,KAAK,EAAE,SAAS;wBAChB,QAAQ,EAAE,QAAQ;wBAClB,WAAW,EAAE,WAAW;wBACxB,QAAQ,EAAE;4BACN,QAAQ,EAAE,YAAY,CAAC,QAAQ;4BAC/B,MAAM,EAAE,YAAY,CAAC,MAAM;4BAC3B,WAAW,EAAE,YAAY,CAAC,WAAW;4BACrC,OAAO,EAAE,YAAY,CAAC,OAAO;4BAC7B,kBAAkB,EAAE,YAAY,CAAC,kBAAkB;yBACtD;qBACJ,CAAC;oBACF,qBAAM,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;;oBAAlC,SAAkC,CAAC;oBAEnC,OAAO,CAAC,GAAG,CAAC,0CAA0C,GAAG,SAAS,CAAC,CAAC;oBACpE,sBAAO,IAAI,EAAC;;;;CACf;AA/BD,oCA+BC","sourcesContent":["import {GQLUserMetadataInput} from \"../../../graphql-types\";\r\nimport {UsersRepository} from \"../../dal/repositories/usersRepository\";\r\nimport {UserDB} from \"../../dal/types/user\";\r\nimport {AppsRepository} from \"../../dal/repositories/appsRepository\";\r\n\r\nexport async function registerUser(root: any, {userEmail, appToken, clockSerial, userMetadata}:\r\n    { userEmail: string, appToken: string, clockSerial: string, userMetadata: GQLUserMetadataInput }): Promise<boolean> {\r\n    let appsRepository = new AppsRepository();\r\n    let appDBPromise = await appsRepository.findByToken(appToken);\r\n    if (!appDBPromise) {\r\n        console.log(\"Cannot identify app token \" + appToken);\r\n        throw new Error(\"Cannot identify app token\");\r\n    }\r\n    let usersRepository = new UsersRepository();\r\n    let foundUserDB = await usersRepository.findByEmailAndAppToken(userEmail, appToken);\r\n    if (foundUserDB) {\r\n        console.log(\"User with email \" + userEmail + \" already exists for app token \" + appToken);\r\n        throw new Error(\"User with email \" + userEmail + \" already exists\");\r\n    }\r\n    // @ts-ignore\r\n    let userDB: UserDB = {\r\n        email: userEmail,\r\n        appToken: appToken,\r\n        clockSerial: clockSerial,\r\n        metadata: {\r\n            fullName: userMetadata.fullName,\r\n            gender: userMetadata.gender,\r\n            dateOfBirth: userMetadata.dateOfBirth,\r\n            address: userMetadata.address,\r\n            medicalInformation: userMetadata.medicalInformation\r\n        }\r\n    };\r\n    await usersRepository.save(userDB);\r\n\r\n    console.log(\"successfully registered user with email \" + userEmail);\r\n    return true;\r\n}"]}