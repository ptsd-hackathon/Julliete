{"version":3,"file":"sendEvent.resolver.js","sourceRoot":"","sources":["sendEvent.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6DAAyD;AAGzD,SAAsB,SAAS,CAAC,IAAS,EAAE,EAG1C;QAH2C,wBAAS,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,sCAAgB,EAAE,oBAAO;;;;;;oBAI5F,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;oBACxC,qBAAM,aAAa,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,CAAC,EAAA;;oBAAzF,SAAyF,CAAC;oBAC1F,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBAC/B,sBAAO,IAAI,EAAC;;;;CACf;AARD,8BAQC","sourcesContent":["import {GQLLocationInput, GQLLogType} from \"../../../graphql-types\";\r\nimport {EventsService} from \"../services/events.service\";\r\n\r\n\r\nexport async function sendEvent(root: any, {userEmail, appToken, location, eventDescription, logType}: {\r\n    userEmail: string, appToken: string, location: GQLLocationInput, eventDescription: string,\r\n    logType: GQLLogType\r\n}): Promise<boolean> {\r\n    let eventsService = new EventsService();\r\n    await eventsService.addNewEvent(userEmail, appToken, logType, eventDescription, location);\r\n    console.log(\"Saved new event\");\r\n    return true;\r\n}"]}