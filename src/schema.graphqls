scalar DateTime

type Query {
    getUserEvents(userEmail: String, appToken: String, fromDate: DateTime, toDate: DateTime): [UserEvent]
}

type Mutation{
    registerApp(appName: String): AppToken
    registerUser(userEmail: String, appToken: String, clockSerial: String, userMetadata: UserMetadataInput): Boolean
    sendUserLocation(userEmail: String, appToken: String, language:String, locationCoordinates: LocationInput): LocationInformation
    sendEvent(userEmail: String, appToken: String, language:String, locationCoordinates: LocationInput, eventDescription: String, logType: LogType): Boolean
}

type UserEvent{
    userEmail: String
    appToken: String
    eventDescription: String
    logType: String
    location: LocationInformation
    medicalStats: [MedicalStats]
    timestamp: DateTime
}

type MedicalStats{
    breathRate: Int
    protocolNumber: Int
    systolicBloodPressure: Int
    strokeVolume: Int
    spo2: Int,
    movement: Int
    cardiacIndex: Int
    heartbeatRateVariance: Int
    heartbeatRate: Int
    MAPrs: Int
    svr: Int
    cardiacOutput: Int
    battery: Int
    diastolicBloodPressure: Int
    temperature: Int
    sweat: Int
    caloris: Int
}

enum LogType{
    STARTED,
    STOPPED,
    REPEATABLE
}
type Weather{
    description:String,
    temperature:String
}
type LocationInformation{
    geocodedAddress: String,
    crowdednessLevel: Float,
    pointsOfInterests: [String],
    weather: Weather,
    coordinates: Coordinates
}

type AppToken{
    token: String
}

input UserMetadataInput{
    fullName: String,
    gender: Gender,
    dateOfBirth: DateTime,
    address: AddressInput,
    medicalInformation: MedicalInformationInput
}

input MedicalInformationInput{
    blabla: String
}

input AddressInput{
    state: String!
    city: String!
    street: String!
    apartment: String!
}

enum Gender{
    MALE,
    FEMALE
}

input LocationInput{
    lat: Float!
    long: Float!
}

type Coordinates{
    lat: Float
    long: Float
}