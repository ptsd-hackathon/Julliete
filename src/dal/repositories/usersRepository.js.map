{"version":3,"file":"usersRepository.js","sourceRoot":"","sources":["usersRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sCAA2C;AAE3C;IAAA;IAYA,CAAC;IAXgB,gDAAsB,GAAnC,UAAoC,KAAa,EAAE,QAAgB;;;;4BACxD,qBAAM,WAAI,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,EAAA;4BAAjE,sBAAO,SAA0D,EAAC;;;;KACrE;IAEY,iCAAO,GAApB;;;;4BACW,qBAAM,WAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAA;4BAA1B,sBAAO,SAAmB,EAAC;;;;KAC9B;IAEM,8BAAI,GAAX,UAAY,IAAY;QACpB,OAAO,IAAI,WAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;IACjC,CAAC;IACL,sBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,0CAAe","sourcesContent":["import {User, UserDB} from \"../types/user\";\r\n\r\nexport class UsersRepository {\r\n    public async findByEmailAndAppToken(email: string, appToken: string): Promise<UserDB | null> {\r\n        return await User.findOne({'email': email, 'appToken': appToken});\r\n    }\r\n\r\n    public async findAll(): Promise<UserDB[] | null> {\r\n        return await User.find({});\r\n    }\r\n\r\n    public save(user: UserDB) {\r\n        return new User(user).save();\r\n    }\r\n}"]}