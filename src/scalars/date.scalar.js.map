{"version":3,"file":"date.scalar.js","sourceRoot":"","sources":["date.scalar.ts"],"names":[],"mappings":";;AAAA,mCAAgD;AAEnC,QAAA,cAAc,GAAG,IAAI,2BAAiB,CAAC;IAChD,IAAI,EAAE,YAAY;IAClB,WAAW,EAAE,aAAa;IAC1B,SAAS,YAAC,KAAK;QACX,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;QACzB,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,UAAU,YAAC,KAAK;QACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7B,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IACD,YAAY,YAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,cAAI,CAAC,GAAG,EAAE;YACvB,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,uCAAuC;SAC1E;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import {GraphQLScalarType, Kind} from \"graphql\";\r\n\r\nexport const dateScalarType = new GraphQLScalarType({\r\n    name: \"DateScalar\",\r\n    description: \"Date scalar\",\r\n    serialize(value) {\r\n        console.log(value + \"a\");\r\n        return value.getTime();\r\n    },\r\n    parseValue(value) {\r\n        console.log(value);\r\n        console.log(new Date(value));\r\n        return new Date(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind === Kind.INT) {\r\n            return parseInt(ast.value, 10); // ast value is always in string format\r\n        }\r\n        return null;\r\n    }\r\n});"]}